name: Deploy Trivia App

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm install --production
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
        
    - name: Make deploy script executable
      run: chmod +x deploy-simple.sh
      
    - name: Clean up failed stack
      run: |
        STACK_STATUS=$(aws cloudformation describe-stacks --stack-name trivia-challenge --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "NONE")
        if [ "$STACK_STATUS" = "ROLLBACK_COMPLETE" ] || [ "$STACK_STATUS" = "ROLLBACK_IN_PROGRESS" ]; then
          echo "Waiting for rollback to complete..."
          aws cloudformation wait stack-rollback-complete --stack-name trivia-challenge || true
          echo "Deleting failed stack..."
          aws cloudformation delete-stack --stack-name trivia-challenge
          aws cloudformation wait stack-delete-complete --stack-name trivia-challenge
        fi
        
    - name: Deploy Infrastructure
      run: |
        aws cloudformation deploy \
          --template-file cloudformation.yml \
          --stack-name trivia-challenge \
          --parameter-overrides \
            ValkeySubnetIds=${{ secrets.VALKEY_SUBNET_IDS }} \
            ValkeySecurityGroupId=${{ secrets.VALKEY_SECURITY_GROUP_ID }} \
            ValkeyEndpoint=${{ secrets.VALKEY_HOST }} \
          --capabilities CAPABILITY_IAM || {
          echo "CloudFormation deployment failed. Getting stack events..."
          aws cloudformation describe-stack-events --stack-name trivia-challenge --query 'StackEvents[?ResourceStatus==`CREATE_FAILED` || ResourceStatus==`UPDATE_FAILED`].[LogicalResourceId,ResourceStatus,ResourceStatusReason]' --output table
          exit 1
        }
          
    - name: Deploy to Lambda
      id: deploy
      env:
        VALKEY_HOST: ${{ secrets.VALKEY_HOST }}
        COGNITO_USER_POOL_ID: ${{ secrets.COGNITO_USER_POOL_ID }}
        COGNITO_CLIENT_ID: ${{ secrets.COGNITO_CLIENT_ID }}
        STACK_NAME: trivia-challenge
        FUNCTION_NAME: trivia-game-trivia-challenge
      run: ./deploy-simple.sh
      
    - name: Notify deployment failure
      if: failure()
      run: |
        echo "‚ùå Deployment failed for commit ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Actor: ${{ github.actor }}"
        
    - name: Health check after deployment
      if: success()
      run: |
        aws lambda invoke \
          --function-name "trivia-game-trivia-challenge" \
          --payload '{"httpMethod":"GET","path":"/health"}' \
          health-response.json
        if ! grep -q "healthy" health-response.json; then
          echo "‚ùå Health check failed, initiating rollback"
          exit 1
        fi
        echo "‚úÖ Health check passed"
        
    - name: Rollback on health check failure
      if: failure() && steps.deploy.outcome == 'success'
      run: |
        echo "üîÑ Rolling back deployment..."
        # Get previous version
        PREVIOUS_VERSION=$(aws lambda list-versions-by-function \
          --function-name "trivia-game-trivia-challenge" \
          --query 'Versions[-2].Version' \
          --output text)
        
        if [ "$PREVIOUS_VERSION" != "None" ] && [ "$PREVIOUS_VERSION" != "\$LATEST" ]; then
          aws lambda update-alias \
            --function-name "trivia-game-trivia-challenge" \
            --name LIVE \
            --function-version "$PREVIOUS_VERSION" || true
          echo "‚úÖ Rollback completed to version $PREVIOUS_VERSION"
        else
          echo "‚ö†Ô∏è No previous version available for rollback"
        fi