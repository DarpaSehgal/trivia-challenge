AWSTemplateFormatVersion: '2010-09-09'
Description: 'Trivia Challenge App Infrastructure'

Parameters:
  ValkeySubnetIds:
    Type: CommaDelimitedList
    Description: Subnet IDs for Valkey cluster
  ValkeySecurityGroupId:
    Type: String
    Description: Security Group ID for Valkey cluster

Resources:
  # ElastiCache Valkey Serverless
  ValkeyServerlessCache:
    Type: AWS::ElastiCache::ServerlessCache
    Properties:
      ServerlessCacheName: trivia-valkey-cache
      Engine: valkey
      MajorEngineVersion: '8'
      SubnetIds: !Ref ValkeySubnetIds
      SecurityGroupIds:
        - !Ref ValkeySecurityGroupId
      Description: 'Valkey cache for trivia challenge app'
      CacheUsageLimits:
        DataStorage:
          Maximum: 1
          Unit: GB
        ECPUPerSecond:
          Maximum: 1000
      DailySnapshotTime: '03:00'
      SnapshotRetentionLimit: 1

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: ValkeyAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - elasticache:*
                Resource: '*'

  # Lambda Functions
  TriviaGameFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: trivia-game
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return { statusCode: 200, body: JSON.stringify({ message: 'Deploy code separately' }) };
          };
      Environment:
        Variables:
          VALKEY_HOST: !GetAtt ValkeyServerlessCache.RedisEndpoint.Address
      VpcConfig:
        SecurityGroupIds:
          - !Ref ValkeySecurityGroupId
        SubnetIds: !Ref ValkeySubnetIds
      Timeout: 30

  QuestionPreloaderFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: question-preloader
      Runtime: nodejs18.x
      Handler: preloader.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return { statusCode: 200, body: JSON.stringify({ message: 'Deploy code separately' }) };
          };
      Environment:
        Variables:
          VALKEY_HOST: !GetAtt ValkeyServerlessCache.RedisEndpoint.Address
      VpcConfig:
        SecurityGroupIds:
          - !Ref ValkeySecurityGroupId
        SubnetIds: !Ref ValkeySubnetIds
      Timeout: 60

  # API Gateway
  TriviaApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: trivia-challenge-api
      Description: API for trivia challenge application

  # S3 Bucket for Frontend
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'trivia-app-${AWS::AccountId}-${AWS::Region}'
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30

  # S3 Bucket Policy
  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
          - Sid: AllowCloudFrontAccess
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOAI}'
            Action: s3:GetObject
            Resource: !Sub '${FrontendBucket}/*'

  # CloudFront Origin Access Identity
  CloudFrontOAI:
    Type: AWS::CloudFront::OriginAccessIdentity
    Properties:
      OriginAccessIdentityConfig:
        Comment: !Sub 'OAI for ${AWS::StackName}'

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt FrontendBucket.RegionalDomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOAI}'
        Enabled: true
        DefaultRootObject: index.html
        Comment: Trivia App CloudFront Distribution
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          Compress: true
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        PriceClass: PriceClass_100

Outputs:
  ValkeyServerlessCacheName:
    Description: Valkey Serverless Cache Name
    Value: !Ref ValkeyServerlessCache
    Export:
      Name: !Sub '${AWS::StackName}-ValkeyServerlessCacheName'

  ValkeyEndpoint:
    Description: Valkey Serverless Cache Endpoint
    Value: !GetAtt ValkeyServerlessCache.RedisEndpoint.Address
    Export:
      Name: !Sub '${AWS::StackName}-ValkeyEndpoint'

  ApiGatewayId:
    Description: API Gateway ID
    Value: !Ref TriviaApi
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayId'

  FrontendBucketName:
    Description: S3 Bucket Name for Frontend
    Value: !Ref FrontendBucket
    Export:
      Name: !Sub '${AWS::StackName}-FrontendBucketName'

  CloudFrontURL:
    Description: CloudFront Distribution URL
    Value: !Sub 'https://${CloudFrontDistribution.DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontURL'

  BucketWebsiteURL:
    Description: S3 Website URL
    Value: !GetAtt FrontendBucket.WebsiteURL
    Export:
      Name: !Sub '${AWS::StackName}-BucketWebsiteURL'